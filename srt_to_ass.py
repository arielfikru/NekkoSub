import re
import argparse
from datetime import datetime
from pathlib import Path

def clean_formatting(text):
    """
    Remove formatting tags from text while preserving the content.
    
    Args:
        text (str): Input text with potential formatting tags
        
    Returns:
        str: Cleaned text if it contains font tags, original text otherwise
    """
    # Check if text contains font tags
    if '<font' in text:
        # Remove font tags
        text = re.sub(r'<font[^>]*>', '', text)
        text = text.replace('</font>', '')
        
        # Remove formatting tags
        text = re.sub(r'<\/?b>', '', text)
        text = re.sub(r'<\/?i>', '', text)
        
        # Remove Aegisub style tags
        text = re.sub(r'{\\[^}]*}', '', text)
        
        # Remove HTML style position tags
        text = re.sub(r'{\an\d}', '', text)
        
        return text.strip()
    return text

def read_srt(srt_path):
    """
    Read the content of an SRT file.
    
    Args:
        srt_path (str): Path to the SRT file
        
    Returns:
        str: Content of the SRT file
    """
    with open(srt_path, 'r', encoding='utf-8') as file:
        content = file.read()
    return content

def write_ass(ass_path, ass_content):
    """
    Write content to an ASS file.
    
    Args:
        ass_path (str): Path where the ASS file will be saved
        ass_content (str): Content to write to the ASS file
    """
    with open(ass_path, 'w', encoding='utf-8') as file:
        file.write(ass_content)

def convert_time_format(srt_time):
    """
    Convert SRT time format to ASS time format.
    
    Args:
        srt_time (str): Time in SRT format (00:00:00,000)
        
    Returns:
        str: Time in ASS format (0:00:00.00)
    """
    time_obj = datetime.strptime(srt_time, '%H:%M:%S,%f')
    return time_obj.strftime('0:%H:%M:%S.%f')[:-4]

def create_ass_header():
    """
    Create the standard ASS file header with Aegisub formatting.
    
    Returns:
        str: ASS file header with default styles and formatting
    """
    return """[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Last Style Storage: Default

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Fredoka One,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,0.5,0,2,10,10,40,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""

def convert_srt_to_ass(srt_path, ass_path):
    """
    Convert an SRT file to ASS format.
    
    Args:
        srt_path (str): Path to the input SRT file
        ass_path (str): Path where the ASS file will be saved
    """
    # Read SRT file
    srt_content = read_srt(srt_path)
    
    # Create ASS header
    ass_content = create_ass_header()
    
    # Parse SRT content
    subtitle_blocks = re.split(r'\n\n+', srt_content.strip())
    
    # Convert each subtitle block
    for block in subtitle_blocks:
        lines = block.split('\n')
        if len(lines) >= 3:  # Ensure valid block
            # Get timestamp
            time_line = lines[1]
            start_time, end_time = time_line.split(' --> ')
            
            # Convert time format
            ass_start = convert_time_format(start_time)
            ass_end = convert_time_format(end_time)
            
            # Combine subtitle text and clean formatting if needed
            text = '\n'.join(lines[2:])
            text = clean_formatting(text)
            text = text.replace('\n', '\\N')  # Replace line breaks with ASS format
            
            # Format ASS line
            ass_line = f"Dialogue: 0,{ass_start},{ass_end},Default,,0,0,0,,{text}\n"
            ass_content += ass_line
    
    # Write ASS file
    write_ass(ass_path, ass_content)

def main():
    """
    Main function to handle command line arguments and control the conversion process.
    """
    parser = argparse.ArgumentParser(description='Convert SRT subtitle files to ASS format')
    parser.add_argument('input', help='Path to input SRT file')
    parser.add_argument('-o', '--output', help='Path to output ASS file (optional)')
    parser.add_argument('-d', '--directory', help='Output directory (optional)')
    
    args = parser.parse_args()
    
    # Process input path
    input_path = Path(args.input)
    
    # Validate input file
    if not input_path.exists():
        print(f"Error: Input file '{input_path}' not found.")
        return
    
    if not input_path.suffix.lower() == '.srt':
        print(f"Error: Input file must be an SRT file")
        return
    
    # Determine output path
    if args.output:
        output_path = Path(args.output)
    else:
        # If output directory is specified, use it
        if args.directory:
            output_dir = Path(args.directory)
            output_dir.mkdir(parents=True, exist_ok=True)
            output_path = output_dir / f"{input_path.stem}.ass"
        else:
            # Use same directory as input
            output_path = input_path.with_suffix('.ass')
    
    try:
        convert_srt_to_ass(str(input_path), str(output_path))
        print(f"Successfully converted '{input_path}' to '{output_path}'")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()
